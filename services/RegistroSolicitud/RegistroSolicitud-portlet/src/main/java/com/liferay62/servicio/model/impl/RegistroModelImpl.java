package com.liferay62.servicio.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay62.servicio.model.Registro;
import com.liferay62.servicio.model.RegistroModel;
import com.liferay62.servicio.model.RegistroSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Registro service. Represents a row in the &quot;RegistroSolicitud_Registro&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay62.servicio.model.RegistroModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RegistroImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RegistroImpl
 * @see com.liferay62.servicio.model.Registro
 * @see com.liferay62.servicio.model.RegistroModel
 * @generated
 */
@JSON(strict = true)
public class RegistroModelImpl extends BaseModelImpl<Registro>
    implements RegistroModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a registro model instance should use the {@link com.liferay62.servicio.model.Registro} interface instead.
     */
    public static final String TABLE_NAME = "RegistroSolicitud_Registro";
    public static final Object[][] TABLE_COLUMNS = {
            { "registroId", Types.BIGINT },
            { "nombre", Types.VARCHAR },
            { "apellido", Types.VARCHAR },
            { "email", Types.VARCHAR },
            { "nacimiento", Types.TIMESTAMP },
            { "alta", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table RegistroSolicitud_Registro (registroId LONG not null primary key,nombre VARCHAR(75) null,apellido VARCHAR(75) null,email VARCHAR(75) null,nacimiento DATE null,alta DATE null)";
    public static final String TABLE_SQL_DROP = "drop table RegistroSolicitud_Registro";
    public static final String ORDER_BY_JPQL = " ORDER BY registro.registroId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY RegistroSolicitud_Registro.registroId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.liferay62.servicio.model.Registro"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.liferay62.servicio.model.Registro"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.liferay62.servicio.model.Registro"),
            true);
    public static long EMAIL_COLUMN_BITMASK = 1L;
    public static long REGISTROID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.liferay62.servicio.model.Registro"));
    private static ClassLoader _classLoader = Registro.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Registro.class
        };
    private long _registroId;
    private String _nombre;
    private String _apellido;
    private String _email;
    private String _originalEmail;
    private Date _nacimiento;
    private Date _alta;
    private long _columnBitmask;
    private Registro _escapedModel;

    public RegistroModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Registro toModel(RegistroSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Registro model = new RegistroImpl();

        model.setRegistroId(soapModel.getRegistroId());
        model.setNombre(soapModel.getNombre());
        model.setApellido(soapModel.getApellido());
        model.setEmail(soapModel.getEmail());
        model.setNacimiento(soapModel.getNacimiento());
        model.setAlta(soapModel.getAlta());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Registro> toModels(RegistroSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Registro> models = new ArrayList<Registro>(soapModels.length);

        for (RegistroSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _registroId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setRegistroId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _registroId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Registro.class;
    }

    @Override
    public String getModelClassName() {
        return Registro.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("registroId", getRegistroId());
        attributes.put("nombre", getNombre());
        attributes.put("apellido", getApellido());
        attributes.put("email", getEmail());
        attributes.put("nacimiento", getNacimiento());
        attributes.put("alta", getAlta());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long registroId = (Long) attributes.get("registroId");

        if (registroId != null) {
            setRegistroId(registroId);
        }

        String nombre = (String) attributes.get("nombre");

        if (nombre != null) {
            setNombre(nombre);
        }

        String apellido = (String) attributes.get("apellido");

        if (apellido != null) {
            setApellido(apellido);
        }

        String email = (String) attributes.get("email");

        if (email != null) {
            setEmail(email);
        }

        Date nacimiento = (Date) attributes.get("nacimiento");

        if (nacimiento != null) {
            setNacimiento(nacimiento);
        }

        Date alta = (Date) attributes.get("alta");

        if (alta != null) {
            setAlta(alta);
        }
    }

    @JSON
    @Override
    public long getRegistroId() {
        return _registroId;
    }

    @Override
    public void setRegistroId(long registroId) {
        _columnBitmask = -1L;

        _registroId = registroId;
    }

    @JSON
    @Override
    public String getNombre() {
        if (_nombre == null) {
            return StringPool.BLANK;
        } else {
            return _nombre;
        }
    }

    @Override
    public void setNombre(String nombre) {
        _nombre = nombre;
    }

    @JSON
    @Override
    public String getApellido() {
        if (_apellido == null) {
            return StringPool.BLANK;
        } else {
            return _apellido;
        }
    }

    @Override
    public void setApellido(String apellido) {
        _apellido = apellido;
    }

    @JSON
    @Override
    public String getEmail() {
        if (_email == null) {
            return StringPool.BLANK;
        } else {
            return _email;
        }
    }

    @Override
    public void setEmail(String email) {
        _columnBitmask |= EMAIL_COLUMN_BITMASK;

        if (_originalEmail == null) {
            _originalEmail = _email;
        }

        _email = email;
    }

    public String getOriginalEmail() {
        return GetterUtil.getString(_originalEmail);
    }

    @JSON
    @Override
    public Date getNacimiento() {
        return _nacimiento;
    }

    @Override
    public void setNacimiento(Date nacimiento) {
        _nacimiento = nacimiento;
    }

    @JSON
    @Override
    public Date getAlta() {
        return _alta;
    }

    @Override
    public void setAlta(Date alta) {
        _alta = alta;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Registro.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Registro toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Registro) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        RegistroImpl registroImpl = new RegistroImpl();

        registroImpl.setRegistroId(getRegistroId());
        registroImpl.setNombre(getNombre());
        registroImpl.setApellido(getApellido());
        registroImpl.setEmail(getEmail());
        registroImpl.setNacimiento(getNacimiento());
        registroImpl.setAlta(getAlta());

        registroImpl.resetOriginalValues();

        return registroImpl;
    }

    @Override
    public int compareTo(Registro registro) {
        int value = 0;

        if (getRegistroId() < registro.getRegistroId()) {
            value = -1;
        } else if (getRegistroId() > registro.getRegistroId()) {
            value = 1;
        } else {
            value = 0;
        }

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Registro)) {
            return false;
        }

        Registro registro = (Registro) obj;

        long primaryKey = registro.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        RegistroModelImpl registroModelImpl = this;

        registroModelImpl._originalEmail = registroModelImpl._email;

        registroModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Registro> toCacheModel() {
        RegistroCacheModel registroCacheModel = new RegistroCacheModel();

        registroCacheModel.registroId = getRegistroId();

        registroCacheModel.nombre = getNombre();

        String nombre = registroCacheModel.nombre;

        if ((nombre != null) && (nombre.length() == 0)) {
            registroCacheModel.nombre = null;
        }

        registroCacheModel.apellido = getApellido();

        String apellido = registroCacheModel.apellido;

        if ((apellido != null) && (apellido.length() == 0)) {
            registroCacheModel.apellido = null;
        }

        registroCacheModel.email = getEmail();

        String email = registroCacheModel.email;

        if ((email != null) && (email.length() == 0)) {
            registroCacheModel.email = null;
        }

        Date nacimiento = getNacimiento();

        if (nacimiento != null) {
            registroCacheModel.nacimiento = nacimiento.getTime();
        } else {
            registroCacheModel.nacimiento = Long.MIN_VALUE;
        }

        Date alta = getAlta();

        if (alta != null) {
            registroCacheModel.alta = alta.getTime();
        } else {
            registroCacheModel.alta = Long.MIN_VALUE;
        }

        return registroCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{registroId=");
        sb.append(getRegistroId());
        sb.append(", nombre=");
        sb.append(getNombre());
        sb.append(", apellido=");
        sb.append(getApellido());
        sb.append(", email=");
        sb.append(getEmail());
        sb.append(", nacimiento=");
        sb.append(getNacimiento());
        sb.append(", alta=");
        sb.append(getAlta());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append("com.liferay62.servicio.model.Registro");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>registroId</column-name><column-value><![CDATA[");
        sb.append(getRegistroId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>nombre</column-name><column-value><![CDATA[");
        sb.append(getNombre());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>apellido</column-name><column-value><![CDATA[");
        sb.append(getApellido());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>email</column-name><column-value><![CDATA[");
        sb.append(getEmail());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>nacimiento</column-name><column-value><![CDATA[");
        sb.append(getNacimiento());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>alta</column-name><column-value><![CDATA[");
        sb.append(getAlta());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
